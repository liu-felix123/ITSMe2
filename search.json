[{"path":"https://lmterryn.github.io/ITSMe/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ITSMe authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"ITSMe","text":"goal ITSMe (Individual Tree Structural Metrics) R package provide easy use functions quickly obtain structural metrics individual tree point clouds respective TreeQSMs.","code":""},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"overview","dir":"Articles","previous_headings":"Point cloud based metrics","what":"Overview","title":"ITSMe","text":"overview basic structural metrics can measured individual tree point cloud ITSMe package:","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"tree-point-cloud-requirements","dir":"Articles","previous_headings":"Point cloud based metrics","what":"Tree point cloud requirements","title":"ITSMe","text":"tree point cloud based functions developed point clouds acquired TLS. can also used tree point clouds obtained LiDAR platforms (e.g. MLS, UAV-LS) point densities high enough (e.g. sufficient stem points DBH measurement). Make sure outliers removed. sampling point cloud required can reduce computation time big tree point clouds.","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"workflow-for-a-single-tree","dir":"Articles","previous_headings":"Point cloud based metrics","what":"Workflow for a single tree","title":"ITSMe","text":"running functions multiple tree point clouds time, advised get familiar functions running single tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"read-the-point-cloud","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Read the point cloud","title":"ITSMe","text":"point cloud based functions (mentioned ) need tree point cloud form data.frame columns X, Y, Z fist argument. ITSME package provides function read_tree_pc1 takes path tree point cloud file (txt, ply las) argument returns data.frame X, Y, Z columns.","code":"# Read the point cloud file from its' specified path tree_pc <- read_tree_pc(path = \"path/to/point/cloud.txt\")"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-position-of-tree-point-cloud","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure position of tree point cloud","title":"ITSMe","text":"position tree can easily determined using tree_position_pc, determines mean X Y value tree point cloud breast height (1.27 m - 1.33 m).","code":"# Measure tree position from the tree point cloud XY_pos <- tree_position_pc(pc = tree_pc)"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-tree-height","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure tree height","title":"ITSMe","text":"tree height can measured using tree_height_pc difference Z-value highest lowest point tree point cloud. tree_height_pc needs tree point cloud input. tree point clouds obtained airborne LiDAR (ALS, UAV-MLS) sample base tree sufficiently recommended use tree_height_pc. cases better determine tree height using digital terrain model.","code":"# Measure tree height from the tree point cloud H <- tree_height_pc(pc = tree_pc)"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-dbh-andor-dab","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure DBH and/or DAB","title":"ITSMe","text":"Depending trees buttressed , make choice diameter breast height (DBH) diameter buttresses (DAB). DBH measured using dbh_pc diameter optimal circle fitted 6mm thick horizontal slice (1.27 m 1.33 m lowest tree point). dbh_pc function needs tree point cloud input, second argument plot set TRUE also plots circle fitting.  trees (mainly tropical, buttressed trees), dbh_pc result :  case determining DAB dab_pc better option. dab_pc, diameter (optimal circle fitted 6mm thick horizontal slice) measured buttresses. height horizontal slice taken (height buttresses), determined iteratively, starting breast height. average residual points fitted circle calculated. average residual exceeds value thresholdbuttress times radius, indicating non-circular (irregular) stem shape presumably buttresses, maxbuttressheight exceeded, process repeated new slice 6 mm higher previous one. maxbuttressheight exceeded iterative process restarted thresholdbuttress increased 0.0005.  Optimise values thresholdbuttress maxbuttressheight tree default values lead desired results: reduce/increase thresholdbuttress height buttresses consistenly low/high. reduce/increase maxbuttressheight buttresses reach lower/higher heights. dbh_pc dab_pc yet take account () slanted trees. Therefore advised always check plots circle fitting. tree point clouds obtained airborne LiDAR (ALS, UAV-MLS) sample stem tree sufficiently dbh_pc dab_pc work due lack stem points.","code":"# Measure DBH from the tree point cloud and plot the circle fitting DBH <- dbh_pc(pc = tree_pc, plot = TRUE) # Measure DAB from the tree point cloud with default settings and plot the circle fitting DAB <- dab_pc(pc = tree_pc, plot = TRUE)"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"classify-crown-points","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Classify crown points","title":"ITSMe","text":"basis crown metrics (e.g. projected crown area crown volume) classify_crown_pc used return points tree point cloud belong crown. crown defined points tree except stem points first branch. height first branch emerges iteratively determined (starting minheight) height diameter stem exceeds thresholdbranch multiplied DBH DAB.  Optimise values thresholdbranch minheight tree default values lead desired results: reduce/increase thresholdbranch crown height consistently determined high/low. reduce minheight height crown starts typically lower. increase minheight height widest part lower stem (example buttresses). buttressed trees, attribute buttress set TRUE previously chosen attributes thresholdbuttress maxbuttressheight can specified. recommended increase minheight buttressed trees.","code":"# Classify the tree point cloud with default settings and plot the classification results crown_pc <- classify_crown_pc(pc = tree_pc, plot = TRUE) # Classify the tree point cloud of a buttressed tree and plot the classification results crown_pc <- classify_crown_pc(pc = tree_pc, minheight = 4, buttress = TRUE,                                plot = TRUE)"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-the-projected-crown-area","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure the projected crown area","title":"ITSMe","text":"projected crown area (PCA) tree point cloud can measured projected_crown_area_pc calculates area concave hull (based concaveman) fitted crown points obtained classify_crown_pc. projected_crown_area_pc uses classify_crown_pc, takes attributes. can however, also specify concavity (default=2).","code":"# Measure the pca of a tree point cloud of a buttressed tree and plot the result PCA <- projected_crown_area_pc(pc = tree_pc, minheight = 4, buttress = TRUE,                                plot = TRUE)"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-the-crown-volume","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure the crown volume","title":"ITSMe","text":"crown volume (CV) tree point cloud can measured volume_crown_pc calculates volume 3D alpha-shape (based alphashape3d) fitted crown points obtained classify_crown_pc. volume_crown_pc uses classify_crown_pc, takes attributes. can however, also specify alpha (default=1).","code":"# Measure the crown volume of a tree point cloud of a buttressed tree and generate 3D plot CV <- volume_crown_pc(pc = tree_pc, minheight = 4, buttress = TRUE, plot = TRUE)"},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"optimise-and-plot","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for multiple trees","what":"Optimise and plot","title":"ITSMe","text":"Often want check optimise performance default attributes used DBH, DAB, crown classification, PCA, CV calculation, multiple tree point clouds one folder. purpose can use plot_dbh_fit_pcs (based dbh_pc), plot_dab_fit_pcs (based dab_pc), plot_crown_classification_pcs (based classify_crown_pc), plot_pca_pcs (based projected_crown_area_pc), plot_cv_pcs (based volume_crown_pc) return DBH, DAB, PCA CV tree folder (PCs_path) save respective figures given output path (OUT_path). First run functions default parameters check rendered figures. Optionally change attributes functions: plot_dab_fit_pcs: thresholdbuttress, maxbuttressheight classify_crown_pc: thresholdbranch, minheight plot_pca_pcs & volume_crown_pc: concavity & alpha","code":"# Run plot_dbh_fit_pcs to see if buttresses influence dbh calculation and  # dab calculation is necesarry DBHs <- plot_dbh_fit_pcs(PCs_path = \"path/to/point/clouds/folder/\" ,                           extension = \".ply\",                           OUT_path = \"path/to/output/folder/\") # For buttressed trees:  # try out different values for thresholdbuttress and maxbuttressheight DABs <- plot_dab_fit_pcs(PCs_path = \"path/to/point/clouds/folder/\" ,                           extension = \".las\",                           OUT_path = \"path/to/output/folder/\",                           thresholdbuttress = 0.002, maxbuttressheight = 9) # Try out different values for thresholdbranch and minheight  # For other attributes: use the values chosen in previous steps # For non-buttressed trees: leave out buttress, thresholdbuttress and maxbuttressheight  plot_crown_classification_pcs(PCs_path = \"path/to/point/clouds/folder/\" ,                           extension = \".txt\",                           OUT_path = \"path/to/output/folder/\",                           thresholdbranch = 2, minheight = 3, buttress = TRUE,                          thresholdbuttress = 0.002, maxbuttressheight = 9) # Try out a different value for concavity  # For other attributes: use the values chosen in previous steps PCAs <- plot_pca_pcs(PCs_path = \"path/to/point/clouds/folder/\" ,                           extension = \".ply\",                           OUT_path = \"path/to/output/folder/\", concavity = 3,                          thresholdbranch = 2, minheight = 3, buttress = TRUE,                          thresholdbuttress = 0.002, maxbuttressheight = 9) # Try out a different value for alpha # For other attributes: use the values chosen in previous steps CVs <- plot_cv_pcs(PCs_path = \"path/to/point/clouds/folder/\" ,                           extension = \".las\",                           OUT_path = \"path/to/output/folder/\", alpha = 2,                          thresholdbranch = 2, minheight = 3, buttress = TRUE,                          thresholdbuttress = 0.002, maxbuttressheight = 9)"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"summarise","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for multiple trees","what":"Summarise","title":"ITSMe","text":"decided default/optimised attributes, can summarise point cloud structural metrics one data.frame (optionally export csv file) tree point clouds folder summary_basic_pointcloud_metrics.","code":"# Summary with default setting for non-buttressed trees summary <- summary_basic_pointcloud_metrics(PCs_path = \"path/to/point/clouds/folder/\") # Summary with default setting (except minheight and buttress) for buttressed trees  summary <- summary_basic_pointcloud_metrics(PCs_path = \"path/to/point/clouds/folder/\",                                              minheight = 4, buttress = TRUE)"},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"overview-1","dir":"Articles","previous_headings":"QSM based metrics","what":"Overview","title":"ITSMe","text":"moment ITSMe package contains TreeQSM based structural metrics defined Åkerblom et al. (2017) Terryn et al. (2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"structural-metrics-from-terryn-et-al--2020","dir":"Articles","previous_headings":"QSM based metrics > Overview","what":"Structural metrics from Terryn et al. (2020)","title":"ITSMe","text":"metrics defined Terryn et al. (2020) copied adapted Åkerblom et al. (2017) except branch angle ratio relative volume ratio new metrics. Definitions metrics can found help files functions papers Terryn et al. (2020) Åkerblom et al. (2017). Normalisation according Terryn et al. (2020) well Åkerblom et al. (2017) possible normalisation parameter included functions metrics adapted Terryn et al.  (2020). tree point cloud provided along TreeQSM functions, DBH DAB tree height values based point clouds rather QSMs. buttress parameter indicated “TRUE” DAB instead DBH used.","code":""},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"read-the-treeqsm","dir":"Articles","previous_headings":"QSM based metrics > Workflow for a single tree","what":"Read the TreeQSM","title":"ITSMe","text":"TreeQSM based functions (mentioned ) need one multiple components (e.g. cylinder, branch, treedata) TreeQSM form lists fist arguments. ITSME package provides function read_tree_qsm reads TreeQSM matlab file (.mat) returns ’ components list (optionally saves TreeQSM components global environment global = TRUE). requires path TreeQSM .mat file first argument TreeQSM version second (default = “2.4.0”) argument.","code":"# Read the TreeQSM file from its' specified path qsm <- read_tree_qsm(path = \"path/to/treeqsm.mat\") # Read the TreeQSM file of version \"2.3.0\" from its' specified path into the global environment qsm <- read_tree_qsm(path = \"path/to/treeqsm.mat\", version = \"2.3.0\",                       global = TRUE)"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"exract-metrics-terryn-et-al--2020","dir":"Articles","previous_headings":"QSM based metrics > Workflow for a single tree","what":"Exract metrics Terryn et al. (2020)","title":"ITSMe","text":"reading TreeQSM, 17 different structural metrics listed table can easily calculated. structural metrics rely one TreeQSM components. metrics rely two TreeQSM components. metrics involve DBH/DAB /tree height, tree point cloud tree can provided input besides TreeQSM data. (general) DBH/DAB tree height accurately measured complete tree point cloud. DBH involved DAB used buttress = TRUE. Normalisation according Terryn et al. (2020) well Åkerblom et al. (2017) possible normalisation parameter included functions metrics adapted Terryn et al.  (2020).","code":"# Calculate the stem branch angle and branch angle ratio from the branch component sba <- stem_branch_angle_qsm(branch = qsm$branch) bar <- branch_angle_ratio_qsm(branch = qsm$branch) # Calculate stem branch cluster size and crown evenness from the cylinder component  sbcs <- stem_branch_cluster_size_qsm(cylinder = qsm$cylinder) ce <- crown_evenness_qsm(cylinder = qsm$cylinder) # Calculate the cylinder length volume ratio from the treedata component clvr <- cylinder_length_volume_ratio_qsm(treedata = qsm$treedata) # Calculate the volume below 55 and the relative volume ratio from  # the cylinder and treedata component vol_55 <- volume_below_55_qsm(cylinder = qsm$cylinder, treedata = qsm$treedata) relvol_ratio <- relative_volume_ratio_qsm(cylinder = qsm$cylinder,                                            treedata = qsm$treedata) # Calculate the shedding ratio from the branch and treedata component shed_ratio <- shedding_ratio_qsm(branch = qsm$branch, treedata = qsm$treedata) # Read the tree point cloud tree_pc <- read_tree_pc(path = \"path/to/point/cloud.txt\") # Calculate the dbh min tree radius and volume ratio using additional point cloud data dmrr <- dbh_minradius_ratio_qsm(treedata = qsm$treedata,                                  cylinder = qsm$cylinder, pc = tree_pc) dvr <- dbh_volume_ratio_qsm(treedata = qsm$treedata, pc = tree_pc) # Calculate the dbh height ratio of a buttressed tree using additional point cloud data # Specify the optimised thresholdbuttress and maxbuttressheight when needed dhr <- dbh_height_ratio_qsm(treedata = qsm$treedata, pc = tree_pc,                              buttress = TRUE, thresholdbuttress = 0.002,                              maxbuttressheight = 5) # Calculate the crown start height, crown height and crown diameter height ratio # using additional point cloud data csh <- crown_start_height_qsm(treedata = qsm$treedata, cylinder = qsm$cylinder,                                pc = tree_pc) ch <- crown_height_qsm(treedata = qsm$treedata, cylinder = qsm$cylinder,                           pc = tree_pc) cdhr <- crown_diameterheight_ratio_qsm(treedata = qsm$treedata,                                              cylinder = qsm$cylinder,                                              pc =tree_pc) # Calculate the stem branch radius according to Åkerblom et al. (2017) sbr <- stem_branch_radius_qsm(cylinder = qsm$cylinder, treedata = qsm$treedata,                                normalisation = \"parentcylinder\") # Calculate the stem branch length according to Terryn et al. (2020)  sbl <- stem_branch_length_qsm(branch = qsm$branch, treedata = qsm$treedata,                                normalisation = \"treeheight\") # Calculate the stem branch distance according to Åkerblom et al. (2017) and # using point cloud information  sbd <- stem_branch_distance_qsm(cylinder = qsm$cylinder,                                  treedata = qsm$treedata, normalisation = \"dbh\",                                  pc =  tree_pc, buttress = TRUE,                                  thresholdbuttress = 0.002,                                  maxbuttressheight = 5)"},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"summarise-metrics-terryn-et-al--2020","dir":"Articles","previous_headings":"QSM based metrics > Workflow for multiple trees","what":"Summarise metrics Terryn et al. (2020)","title":"ITSMe","text":"can summarise structural metrics defined Terryn et al. (2020) one data.frame (optionally export csv file) TreeQSMs folder summary_Terryn_2020. Choose normalisation stem_branch_radius_qsm, stem_branch_length_qsm, stem_branch_distance_qsm. case want use tree point cloud information, specify folder (PCs_path) extension tree point cloud files, indicate trees buttresses (buttress) specify want use non-default argument values (thresholdbuttress maxbuttressheight) calculate DAB (see chapter point cloud metrics). want data.frame exported csv file, specify path output folder (OUT_path) QSM files format xxx_000_qsm.mat (xxx plotname, 000 tree number) xxx_000_qsm_0.mat (0 end example n-th QSM made tree 000). multiple QSMs present one tree mean values different QSMs taken tree final value certain feature. provided, tree point clouds files format xxx_000_pc order link tree point cloud ’ respective treeQSM.","code":"# Run the summary function with default settings (without point cloud info) summary_Terryn_2020(QSMs_path = \"path/to/treeqsm/folder/\") # Run the summary function with default settings with point cloud info summary_Terryn_2020(QSMs_path = \"path/to/treeqsms/folder/\",                      PCs_path = \"path/to/point/clouds/folder/\") # Run the summary function with non-default settings with point cloud info summary_Terryn_2020(QSMs_path = \"path/to/treeqsms/folder/\", version = \"2.4.0\",                      sbr_normalisation = \"parentcylinder\",                      sbl_normalisation = \"dbh\", sbd_normalisation = \"dbh\",                      PCs_path = \"path/to/point/clouds/folder/\",                      extension = \".ply\", buttress = TRUE,                      thresholdbuttress = 0.002, maxbuttressheight = 5,                      OUT_path = \"path/to/output/folder/\")"},{"path":"https://lmterryn.github.io/ITSMe/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Louise Terryn. Author, maintainer. Kim Calders. Contributor.","code":""},{"path":"https://lmterryn.github.io/ITSMe/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Terryn L (2022). ITSMe: Individual Tree Structural Metrics. https://github.com/lmterryn/ITSMe, https://lmterryn.github.io/ITSMe/.","code":"@Manual{,   title = {ITSMe: Individual Tree Structural Metrics},   author = {Louise Terryn},   year = {2022},   note = {https://github.com/lmterryn/ITSMe, https://lmterryn.github.io/ITSMe/}, }"},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"goal","dir":"","previous_headings":"","what":"Goal","title":"Individual Tree Structural Metrics ","text":"goal ITSMe R package provide easy use functions quickly obtain structural metrics individual tree point clouds respective TreeQSMs.","code":""},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Individual Tree Structural Metrics ","text":"can install development version ITSMe GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"lmterryn/ITSMe\", build_vignettes = TRUE)"},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"input","dir":"","previous_headings":"","what":"Input","title":"Individual Tree Structural Metrics ","text":"functions developed tree point clouds obtained TLS quantitative structure models (QSMs) obtained TreeQSM. tree point cloud based functions can also used tree point clouds obtained MLS UAV-LS point densities high enough (e.g. sufficient stem points dbh/dab estimation).","code":""},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"individual-tree-structural-metrics","dir":"","previous_headings":"","what":"Individual tree structural metrics","title":"Individual Tree Structural Metrics ","text":"Structural metrics can calculated ITSMe package summarized tables .","code":""},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"structural-metrics-from-terryn-et-al-2020","dir":"","previous_headings":"Individual tree structural metrics","what":"Structural metrics from Terryn et al. (2020)","title":"Individual Tree Structural Metrics ","text":"metrics defined Terryn et al. (2020) copied adapted Akerblom et al. (2017) except branch angle ratio relative volume ratio. Definitions metrics can found help files functions papers Terryn et al. (2020) Akerblom et al. (2017). Normalisation according Terryn et al. (2020) well Akerblom et al. (2017) possible normalisation parameter included functions metrics adapted Terryn et al. (2020). tree point cloud provided along TreeQSM functions, dbh tree height values based point clouds rather QSMs. buttress parameter indicated “TRUE” diameter buttresses rather dbh used.","code":""},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Individual Tree Structural Metrics ","text":"complete workflows, look ITSMe website vignette : Calculating diameter breast height versus diameter buttresses tree:   want determine dbh dab several tree point clouds (folder) visually check circle fitting, use plot_dbh_fit_pcs plot_dab_fit_pc functions. plot_dab_fit_pcs function can also used optimise parameters dab_pc function default values give desired results: 1. Run plot_dab_fit_pcs default values (thresholdbuttress = 0.001, maxbuttressheight = 7). 2. Check generated figures OUT_path. 3. Increase/decrease maxbuttressheight buttresses trees reach higher/lower heights. 4. Increase/decrease thresholdbuttress diameter taken high/low. Use plot_crown_classification_pcs check crown classification used projected_crown_area_pc crown_volume_pc functions. plot_pca_pcs plot_cv_pcs can help determine desired concavity alpha values calculate projected crown area crown volume respectively. Calculating stem branch distance TreeQSM: Calculating summary data.frame basic structural metrics (tree position, dbh, dab, tree height, projected crown area, crown volume) can obtained individual tree point clouds point clouds specific folder: Calculating summary data.frame structural metrics defined Terryn et al. (2020) TreeQSMs specific folder:","code":"vignette(\"ITSMe\") library(ITSMe) # Read the point cloud file from the Specified path to the tree point cloud file pc_tree <- read_tree_pc(path = \"path/to/point/cloud.txt\") # Use dbh_pc function with default parameters and plot the fit dbh <- dbh_pc(pc = pc_tree, plot = TRUE) # Use dab_pc function with default parameters and plot the fit dab <- dab_pc(pc = pc_tree, plot = TRUE) library(ITSMe) # Read the TreeQSM file from the Specified path to the TreeQSM file qsm <- read_tree_qsm(path = \"path/to/QSM.mat\") # Use stem_branch_distance_qsm function sbd <- stem_branch_distance_qsm(cylinder = qsm$cylinder,                                  treedata = qsm$treedata, normalisation = \"dbh\") # Using the point cloud information for more accurate dbh normalisation pc_tree <- read_tree_pc(path = \"path/to/point/cloud.txt\") sbd <- stem_branch_distance_qsm(cylinder = qsm$cylinder,                                  treedata = qsm$treedata, normalisation = \"dbh\",                                  pc = pc_tree, buttress = TRUE) library(ITSMe) #Specify the path to the folder containing multiple tree point cloud files PCs_path <-  #Run summary function with default parameter settings basic_summary <- summary_basic_pointcloud_metrics(PCs_path = \"path/to/point/cloud/folder/\",                                                    extension = \".txt\") library(ITSMe) #Specify the path to the folder containing the respective tree point cloud files #If you want dbh/dab and height to be calculated based on tree point clouds: #Specify the path to the folder containing the respective tree point cloud files #Run summary function with default parameter settings Terryn_summary <- summary_Terryn_2020(QSMs_path = \"path/to/QSM/folder/\",                                        version = \"2.3.0\",                                       PCs_path = \"path/to/point/cloud/folder/\",                                        extension = \".txt\")"},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter at breast height TreeQSM — dbh_qsm","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"Extracts DBH treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"","code":"dbh_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"DBH TreeQSM meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"DBH calculated diameter cylinder QSM right height (cylinder 1.3 m). trunk modeled triangulation DBH calculated mean length diagonals triangulation.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract DBH qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") dbh <- dbh_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"Calculates branch angle ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"","code":"branch_angle_ratio_qsm(branch)"},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"branch Branch field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"branch angle ratio. NaN branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"branch angle ratio defined \"Ratio medians branching angles 1st order branches 2nd order branches\" (Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the branch angle ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") br <- branch_angle_ratio_qsm(branch = qsm$branch) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance from the center — calc_r","title":"Distance from the center — calc_r","text":"Calculates distance 2D point (X,Y) point cloud center (xc, yc) circle.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance from the center — calc_r","text":"","code":"calc_r(x, y, xc, yc)"},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance from the center — calc_r","text":"x X values points. y Y values points. xc X-coordinate center. yc Y-coordinate center.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance from the center — calc_r","text":"distance 2D points center","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance from the center — calc_r","text":"Support function used determine DBH tree point cloud dbh_pc dab_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance from the center — calc_r","text":"","code":"if (FALSE) { Ri <- calc_r(x_dbh, y_dbh, x_c, y_c) R <- mean(Ri) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown classification point cloud — classify_crown_pc","title":"Crown classification point cloud — classify_crown_pc","text":"Returns crown points tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown classification point cloud — classify_crown_pc","text":"","code":"classify_crown_pc(   pc,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   plot = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown classification point cloud — classify_crown_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. thresholdbranch Numeric value (default=1.5) multiplied diameter tree (calculated dbh_pc dab_pc buttress =TRUE) determines cutt-branch emerges crown begins. minheight Numeric value (default=1) minimum height crown begins. widest part buttresses buttressed trees (value 4 recommended). non-buttressed trees choose lower value (1). buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant buttress == TRUE. plot Logical (default=FALSE), indicates classified tree plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown classification point cloud — classify_crown_pc","text":"Data.frame crown point cloud (part tree first branch). Also optionally (plot=TRUE) plots crown vs non-crown points.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown classification point cloud — classify_crown_pc","text":"classification based increased distance minimum maximum X (Y) coordinates tree points within horizontal slice first branch reached increasing height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown classification point cloud — classify_crown_pc","text":"","code":"if (FALSE) { # Read tree point cloud and extract the crown points pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") crown_pc <- classify_crown_pc(pc = pc_tree) # and plot the classification results crown_pc <- classify_crown_pc(pc = pc_tree, plot = TRUE) # with non-default settings for a buttressed tree crown_pc <- classify_crown_pc(pc = pc_tree, minheight = 4, buttress = TRUE,                               plot = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"Calculates ratio crown diameter crown height TreeQSM (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"","code":"crown_diameterheight_ratio_qsm(treedata, cylinder, pc = NA)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"ratio crown diameter crown height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"crown diameter maximum radii vertical bin radius estimates calculated vertical_bin_radii_qsm. crown height vertical distance highest lowest crown cylinder obtained crown_height_qsm multiplied tree_height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the crown diameter height ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") cdh_ratio <- crown_diameterheight_ratio_qsm(treedata = qsm$treedata,                                             cylinder = qsm$cylinder) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") cdh_ratio <- crown_diameterheight_ratio_qsm(treedata = qsm$treedata,                                             cylinder = qsm$cylinder,                                             pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown evenness TreeQSM — crown_evenness_qsm","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"Calculates crown evenness TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"","code":"crown_evenness_qsm(cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"crown evenness.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"crown evenness defined \"crown cylinders divided 8 angular bins. Ratio minimum heights highest lowest bin.\" (Akerblom et al., 2017 & Terryn et al., 2020). Crown cylinders determined crownset_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the crown evenness qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") ce <- crown_evenness_qsm(cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown height TreeQSM — crown_height_qsm","title":"Crown height TreeQSM — crown_height_qsm","text":"Calculates crown height TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown height TreeQSM — crown_height_qsm","text":"","code":"crown_height_qsm(treedata, cylinder, pc = NA)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown height TreeQSM — crown_height_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown height TreeQSM — crown_height_qsm","text":"crown height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown height TreeQSM — crown_height_qsm","text":"crown height defined \"vertical distance highest lowest crown cylinder relative tree height\" (Akerblom et al., 2017 & Terryn et al., 2020). tree height calculated tree_height. Crown cylinders determined crownset_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crown height TreeQSM — crown_height_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown height TreeQSM — crown_height_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the crown height qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") ch <- crown_height_qsm(treedata = qsm$treedata, cylinder = qsm$cylinder) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") ch <- crown_height_qsm(treedata = qsm$treedata, cylinder = qsm$cylinder,                        pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown start height TreeQSM — crown_start_height_qsm","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"Calculates crown start height TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"","code":"crown_start_height_qsm(treedata, cylinder, pc = NA)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"crown start height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"crown start height defined \"height first stem branch tree crown relative tree height\" (Akerblom et al., 2017 & Terryn et al., 2020). tree height calculated tree_height. Crown cylinders determined crownset_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the crown start height qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") csh <- crown_start_height_qsm(treedata = qsm$treedata,                               cylinder = qsm$cylinder) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") csh <- crown_start_height_qsm(treedata = qsm$treedata,                               cylinder = qsm$cylinder, pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crownset TreeQSM — crownset_qsm","title":"Crownset TreeQSM — crownset_qsm","text":"Returns indices cylinders belonging crown treeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crownset TreeQSM — crownset_qsm","text":"","code":"crownset_qsm(cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crownset TreeQSM — crownset_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crownset TreeQSM — crownset_qsm","text":"integer containing indices cylinders belonging crownset.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crownset TreeQSM — crownset_qsm","text":"crownset determined based four steps (designed exclude dead branches bottom stem) according Akerblom et al. (2017). STEP 1: Initialize crown set cylinders branching order higher three. initial set empty, minimum order lowered set becomes non-empty. STEP 2: long crown set extends, append parent cylinders crown set part stem. STEP 3: Append crown set cylinders part stem whose start point higher lowest starting point crown cylinders connected stem. STEP 4: long crown set extends, append child cylinders crown set.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crownset TreeQSM — crownset_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crownset TreeQSM — crownset_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract the crownset qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") crown <- crownset_qsm(cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"Calculates cylinder length volume ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"","code":"cylinder_length_volume_ratio_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"cylinder length volume ratio meters-2.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"cylinder length volume ratio defined \"ratio total length volume branch cylinders\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the cylinder length volume ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") clvr <- cylinder_length_volume_ratio_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter above buttresses point cloud — dab_pc","title":"Diameter above buttresses point cloud — dab_pc","text":"Returns diameter buttresses (DAB) tree measured tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter above buttresses point cloud — dab_pc","text":"","code":"dab_pc(pc, thresholdbuttress = 0.001, maxbuttressheight = 7, plot = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter above buttresses point cloud — dab_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. thresholdbuttress Numeric value (default=0.001) multiplied radius determine stem circular irregular height slice taken. example default value 0.001: average residual (obtained initial circle fitting 1.3 m) exceeds value 0.001 times radius, indicating non-circular (irregular) stem shape presumably buttresses, circle fitting process repeated new slice 6 mm higher previous one slice buttresses reached. maxbuttressheight Numeric value (default=7) limits height diameter measured. height reached (residuals become smaller thresholdbuttress * R), thresholdbuttress value increased 0.0005 fitting starts 1.3 m. plot Logical (default=FALSE), indicates optimised circle fitting plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter above buttresses point cloud — dab_pc","text":"Diameter stem buttresses (numeric value). Also optionally (plot=TRUE) plots circle fitting horizontal slice.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter above buttresses point cloud — dab_pc","text":"DAB measured diameter optimal circle fitted 6mm thick horizontal slice taken buttresses. least squares circle fitting algorithm applied find optimal fit. height horizontal slice taken, determined iteratively. Starting 1.27 m 1.33 m lowest point tree point cloud. average residual points fitted circle calculated. average residual exceeds value \"thresholdbuttress\" times radius, indicating non-circular (irregular) stem shape presumably buttresses, process repeated new slice 6 mm higher previous one slice buttresses reached. \"maxbuttressheight\" exceeded iterative process restarted \"thresholdbuttress\" increased 0.0005.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter above buttresses point cloud — dab_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the DAB pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") dab <- dab_pc(pc = pc_tree) # and plot the circle fitting dab <- dab_pc(pc = pc_tree, plot = TRUE) # with non-default settings dab <- dab_pc(pc = pc_tree, thresholdbuttress = 0.002, maxbuttressheight = 5,               plot = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter at breast height/above buttresses — dbh","title":"Diameter at breast height/above buttresses — dbh","text":"Returns diameter breast height diameter buttresses.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter at breast height/above buttresses — dbh","text":"","code":"dbh(   treedata,   pc = NA,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter at breast height/above buttresses — dbh","text":"treedata Treedata field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter at breast height/above buttresses — dbh","text":"dbh dab meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter at breast height/above buttresses — dbh","text":"tree point cloud available calculations based point cloud (accurate). case diameter breast height (dbh) diameter buttresses (dab) calculated dbh_pc dab_pc respectively. tree point cloud available dbh based treeQSM dbh_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter at breast height/above buttresses — dbh","text":"","code":"if (FALSE) { qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") DBH <- dbh(treedata = qsm$treedata) pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") DBH <- dbh(treedata = qsm$treedata, pc = pc_tree, buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"Calculates DBH-tree height ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"","code":"dbh_height_ratio_qsm(   treedata,   pc = NA,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"DBH divided tree height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"DBH tree height calculated dbh tree_height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the dbh height ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") dhr <- dbh_height_ratio_qsm(treedata = qsm$treedata) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") dhr <- dbh_height_ratio_qsm(treedata = qsm$treedata, pc = pc_tree) # for buttressed trees dhr <- dbh_height_ratio_qsm(treedata = qsm$treedata, pc = pc_tree,                             buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"Calculates ratio dbh minimum tree radius TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"","code":"dbh_minradius_ratio_qsm(   treedata,   cylinder,   pc = NA,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. buttress Logical (default=FALSE), indicates trees buttresses. relevant pc thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"ratio dbh minimum tree radius.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"ratio defined \"Ratio DBH minimum vertical bin radius estimates\" (Akerblom et al., 2017 & Terryn et al., 2020). vertical bin radius estimates calculated vertical_bin_radii_qsm. DBH calculated dbh.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the dbh minimum tree radius ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") dmrr <- dbh_minradius_ratio_qsm(treedata = qsm$treedata,                                 cylinder = qsm$cylinder) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") dmrr <- dbh_minradius_ratio_qsm(treedata = qsm$treedata,                                 cylinder = qsm$cylinder, pc = pc_tree) # for a buttressed tree dmrr <- dbh_minradius_ratio_qsm(treedata = qsm$treedata,                                 cylinder = qsm$cylinder, pc = pc_tree,                                 buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter at breast height point cloud — dbh_pc","title":"Diameter at breast height point cloud — dbh_pc","text":"Returns diameter breast height (DBH) tree measured tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter at breast height point cloud — dbh_pc","text":"","code":"dbh_pc(pc, plot = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter at breast height point cloud — dbh_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. plot Logical (default=FALSE), indicates optimised circle fitting plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter at breast height point cloud — dbh_pc","text":"Diameter stem breast height (numeric value). Also optionally (plot=TRUE) plots circle fitting horizontal slice.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter at breast height point cloud — dbh_pc","text":"DBH measured diameter optimal circle fitted 6mm thick horizontal slice (1.27 m 1.33 m lowest tree point). least squares circle fitting algorithm applied find optimal fit.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter at breast height point cloud — dbh_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the DBH pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") dbh <- dbh_pc(pc = pc_tree) # and plot the circle fitting dbh <- dbh_pc(pc = pc_tree, plot = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"Calculates DBH-tree volume ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"","code":"dbh_volume_ratio_qsm(   treedata,   pc = NA,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"DBH divided tree volume (trunk plus branches) meters-2.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"DBH tree volume calculated dbh tree_volume_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the dbh volume ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") dvr <- dbh_volume_ratio_qsm(treedata = qsm$treedata) # with point cloud data pc_tree <- read_tree_pc(\"path/to/point_cloud.txt\") dvr <- dbh_volume_ratio_qsm(treedata = qsm$treedata, pc = pc_tree) # for buttressed trees dvr <- dbh_volume_ratio_qsm(treedata = qsm$treedata, pc = pc_tree,                             buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":null,"dir":"Reference","previous_headings":"","what":"Algebraic distance from the center — f","title":"Algebraic distance from the center — f","text":"Calculates algebraic distance data points mean circle centered c=(xc, yc) based calc_r.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Algebraic distance from the center — f","text":"","code":"f(c, x, y)"},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Algebraic distance from the center — f","text":"c First estimate center coordinates optimised (xc,yc). x X values points. y Y values points.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Algebraic distance from the center — f","text":"optimised returns optimised center estimate circle fitting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Algebraic distance from the center — f","text":"Support function used determine DBH tree point cloud functions dbh_pc dab_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Algebraic distance from the center — f","text":"","code":"if (FALSE) { center_estimate <- optim(par = c(x_m, y_m), fn = f, x = x_dbh, y = y_dbh) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a tree point cloud — normalize_pc","title":"Normalize a tree point cloud — normalize_pc","text":"Normalizes tree point cloud subtracting column respective min value (e.g. X-values - min(X-values)).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a tree point cloud — normalize_pc","text":"","code":"normalize_pc(pc)"},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a tree point cloud — normalize_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a tree point cloud — normalize_pc","text":"Normalized point cloud data.frame columns X,Y,Z.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize a tree point cloud — normalize_pc","text":"","code":"if (FALSE) { # Read tree point cloud and normalise the point cloud pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") pc_norm <- normalize_pc(pc) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"Classifies tree point clouds crown non crown points saves figures classify_crown_pc multiple tree point clouds folder. Use different values thresholdbranch minheight parameter optimise crown classification tree point clouds. Mainly minheight parameter needs optimised, small values (e.g. trees buttresses higher values (e.g 4) trees buttresses. buttressed trees, first optimise thresholdbuttress maxbuttressheight parameter values using plot_dab_fit_pcs use optimised values function.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"","code":"plot_crown_classification_pcs(   PCs_path,   extension = \".txt\",   OUT_path,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved. thresholdbranch Numeric value (default=1.5) classify_crown_pc. minheight Numeric value (default=1) classify_crown_pc. default value based non-buttressed trees. Choose higher value (e.g. 4) buttressed trees. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"Figures saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"Uses read_tree_pc read point clouds classify_crown_pc parameter plot = TRUE classify tree point cloud plot classification.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"","code":"if (FALSE) { # Run the crown classification with default settings and save figures plot_crown_classification_pcs(PCs_path = \"path/to/folder/PCs/\",                               extension = \".txt\",                               OUT_path = \"path/to/figure/folder/\") # Run the crown classification with non-default settings and save figures plot_crown_classification_pcs(PCs_path = \"path/to/folder/PCs/\",                               extension = \".txt\",                               OUT_path = \"path/to/figure/folder/\",                               thresholdbranch = 2, minheight = 4) # Run the crown classification with non-default settings and save figures # for buttressed trees plot_crown_classification_pcs(PCs_path = \"path/to/folder/PCs/\",                               extension = \".txt\",                               OUT_path = \"path/to/figure/folder/\",                               thresholdbranch = 2, minheight = 4,                               buttress = TRUE, thresholdbuttress = 0.002,                               maxbuttressheight = 5) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_cv_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of volume_crown_pc function — plot_cv_pcs","title":"Calculate and save figures of volume_crown_pc function — plot_cv_pcs","text":"Calculates crown volume saves figures acquired running volume_crown_pc multiple tree point clouds folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_cv_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of volume_crown_pc function — plot_cv_pcs","text":"","code":"plot_cv_pcs(   PCs_path,   extension = \".txt\",   OUT_path,   alpha = 1,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_cv_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of volume_crown_pc function — plot_cv_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved. alpha Numeric value (default=1) alpha computation 3D alpha-shape tree crown based ashape3d volume_crown_pc. thresholdbranch Numeric value (default=1.5) classify_crown_pc. minheight Numeric value (default=1) classify_crown_pc. default value based non-buttressed trees. Choose higher value (e.g. 4) buttressed trees. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_cv_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of volume_crown_pc function — plot_cv_pcs","text":"numeric containing crown volume values tree point cloud. Figures saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_cv_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of volume_crown_pc function — plot_cv_pcs","text":"Uses read_tree_pc read point clouds volume_crown_pc parameter plot = TRUE calculate crown volume plot crown 3D alpha-shape fitting. buttressed trees, first optimise thresholdbuttress, maxbuttressheight, thresholdbranch minheight parameter values using plot_dab_fit_pcs plot_crown_classification_pcs use optimised values function.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_cv_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of volume_crown_pc function — plot_cv_pcs","text":"","code":"if (FALSE) { # Calculate CV with default settings and save alpha shape figures cvs <- plot_cv_pcs(PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",                    OUT_path = \"path/to/figure/folder/\") # Calculate CV with non-default settings and save alpha shape figures cvs <- plot_cv_pcs(PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",                    OUT_path = \"path/to/figure/folder/\", alpha = 2) # Calculate CV with non-default settings and save alpha shape figures # for buttressed trees cvs <- plot_cv_pcs(PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",                    OUT_path = \"path/to/figure/folder/\", alpha = 2,                    minheight = 4, buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"Calculates dab saves figures acquired running dab_pc multiple tree point clouds folder. Use different values thresholdbuttress maxbuttressheight parameter optimise dab calculation tree point clouds.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"","code":"plot_dab_fit_pcs(   PCs_path,   extension = \".txt\",   OUT_path,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"numeric containing dbh values tree point cloud. Figures saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"Uses read_tree_pc read point clouds dab_pc parameter plot = TRUE calculate dab plot circle fitting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"","code":"if (FALSE) { # Calculate DABs with default settings and save circle fitting figures dab_values <- plot_dab_fit_pcs(PCs_path = \"path/to/folder/PCs/\",                                extension = \".txt\",                                OUT_path = \"path/to/figure/folder/\") # Calculate DABs with non-default settings and save circle fitting figures dab_values <- plot_dab_fit_pcs(PCs_path = \"path/to/folder/PCs/\",                                extension = \".txt\",                                OUT_path = \"path/to/figure/folder/\",                                thresholdbuttress = 0.002,                                maxbuttressheight = 5) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"Calculates  dbh saves figures acquired running dbh_pc multiple tree point clouds folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"","code":"plot_dbh_fit_pcs(PCs_path, extension = \".txt\", OUT_path)"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"numeric containing dbh values tree point cloud. Figures saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"Uses read_tree_pc read point clouds dbh_pc parameter plot = TRUE calculate dbh plot circle fitting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"","code":"if (FALSE) { # Calculate DBHs and save circle fitting figures dbh_values <- plot_dbh_fit_pcs(PCs_path = \"path/to/folder/PCs/\",                                extension = \".txt\",                                OUT_path = \"path/to/figure/folder/\") }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pca_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of projected_crown_area_pc function — plot_pca_pcs","title":"Calculate and save figures of projected_crown_area_pc function — plot_pca_pcs","text":"Calculates projected crown area (pca) saves figures acquired running projected_crown_area_pc multiple tree point clouds folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pca_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of projected_crown_area_pc function — plot_pca_pcs","text":"","code":"plot_pca_pcs(   PCs_path,   extension = \".txt\",   OUT_path,   concavity = 2,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pca_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of projected_crown_area_pc function — plot_pca_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved. concavity Numeric value (default=2) concavity computation concave hull based concaveman projected_crown_area_pc. thresholdbranch Numeric value (default=1.5) classify_crown_pc. minheight Numeric value (default=1) classify_crown_pc. default value based non-buttressed trees. Choose higher value (e.g. 4) buttressed trees. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pca_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of projected_crown_area_pc function — plot_pca_pcs","text":"numeric containing pca values tree point cloud. Figures saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pca_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of projected_crown_area_pc function — plot_pca_pcs","text":"Uses read_tree_pc read point clouds projected_crown_area_pc parameter plot = TRUE calculate pca plot crown projection fitting. buttressed trees, first optimise thresholdbuttress, maxbuttressheight, thresholdbranch minheight parameter values using plot_dab_fit_pcs plot_crown_classification_pcs use optimised values function.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pca_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of projected_crown_area_pc function — plot_pca_pcs","text":"","code":"if (FALSE) { # Calculate PCA with default settings and save projection figures pcas <- plot_pca_pcs(PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",                      OUT_path = \"path/to/figure/folder/\") # Calculate PCA with non-default settings and save projection figures pcas <- plot_pca_pcs(PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",                      OUT_path = \"path/to/figure/folder/\", concavity = 3) # Calculate PCA with non-default settings and save projection figures # for buttressed trees pcas <- plot_pca_pcs(PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",                      OUT_path = \"path/to/figure/folder/\", concavity = 3,                      minheight = 4, buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_crown_area_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Projected crown area point cloud — projected_crown_area_pc","title":"Projected crown area point cloud — projected_crown_area_pc","text":"Returns projected crown area measured tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_crown_area_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projected crown area point cloud — projected_crown_area_pc","text":"","code":"projected_crown_area_pc(   pc,   concavity = 2,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   plot = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_crown_area_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projected crown area point cloud — projected_crown_area_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. concavity Numeric value (default=2) concavity computation concave hull based concaveman. thresholdbranch Numeric value (default=1.5) classify_crown_pc. minheight Numeric value (default=1) classify_crown_pc. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant buttress == TRUE. plot Logical (default=FALSE), indicates optimised circle fitting plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_crown_area_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projected crown area point cloud — projected_crown_area_pc","text":"projected crown area (numeric value) area concave hull computed crown points tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_crown_area_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projected crown area point cloud — projected_crown_area_pc","text":"function uses st_area concaveman calculate area concave hull fitted crown points obtained classify_crown_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_crown_area_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projected crown area point cloud — projected_crown_area_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the projected crown area pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") pca <- projected_crown_area_pc(pc = pc_tree) # and plot the concave hull fitting pca <- projected_crown_area_pc(pc = pc_tree, plot = TRUE) # with non-default settings for a buttressed tree pca <- projected_crown_area_pc(pc = pc_tree, concavity = 3, minheight = 4,                                buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a tree point cloud — read_tree_pc","title":"Read a tree point cloud — read_tree_pc","text":"Reads tree point cloud file txt, las ply format returns tree point cloud data.frame 3 columns (X,Y,Z).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a tree point cloud — read_tree_pc","text":"","code":"read_tree_pc(path, samplefactor = 1)"},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a tree point cloud — read_tree_pc","text":"path character path tree point cloud file. File can txt, las ply format. 3D coordinates first three columns case txt file. samplefactor numeric value ranging 0 1 (default=1). determines amount points sampled point cloud. 1 sample 100 percent points example 0.5 sample 50 percent points.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a tree point cloud — read_tree_pc","text":"tree point cloud data.frame (nx3) X, Y, Z coordinates first, second third column respectively.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a tree point cloud — read_tree_pc","text":"Reading txt, las ply files based fread, readTLSLAS vcgPlyRead respectively. Sampling based sample mainly useful tool reduce amount points quicker plotting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a tree point cloud — read_tree_pc","text":"","code":"if (FALSE) { # Read a tree point cloud file of the txt format pc_txt <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") # Read a tree point cloud file of the ply format pc_ply <- read_tree_pc(PC_path = \"path/to/point_cloud.ply\") # Read a tree point cloud file of the las format # and subsample to 20 percent of the points pc_las <- read_tree_pc(PC_path = \"path/to/point_cloud.las\", 0.2) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a TreeQSM — read_tree_qsm","title":"Read a TreeQSM — read_tree_qsm","text":"Reads TreeQSM matlab file (.mat) returns ' components list optionally saves TreeQSM components global environment.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a TreeQSM — read_tree_qsm","text":"","code":"read_tree_qsm(path, version = \"2.4.0\", global = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a TreeQSM — read_tree_qsm","text":"path character path TreeQSM mat file. file contains one QSM produced https://github.com/InverseTampere/TreeQSM matlab. version character indicating version TreeQSM used produce TreeQSMs. Default version \"2.4.0\" possible versions \"2.0\", \"2.3.0\", \"2.3.1\" \"2.3.2\". global Logical (default=FALSE), indicates TreeQSM components read global environment.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a TreeQSM — read_tree_qsm","text":"Returns list TreeQSM components (cylinder, branch, treedata triangulation) optionally (global=TRUE) saves global environment.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a TreeQSM — read_tree_qsm","text":"Initial reading .mat file uses readMat. TreeQSM versions older 2.4.0 converted 2.4.0 structure, value attributes found older version set NA.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a TreeQSM — read_tree_qsm","text":"","code":"if (FALSE) { # Read a TreeQSM.mat file with default settings qsm <- read_tree_qsm(QSM_path = \"path/to/TreeQSM.mat\") # Read a TreeQSM.mat file of version 2.0 qsm <- read_tree_qsm(QSM_path = \"path/to/TreeQSM.mat\", version = \"2.0\") # Read a TreeQSM.mat file with into the global environment qsm <- read_tree_qsm(QSM_path = \"path/to/TreeQSM.mat\", global = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"Calculates relative volume ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"","code":"relative_volume_ratio_qsm(cylinder, treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"relative volume ratio.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"relative volume ratio defined \"Ratio percentage volume within 80 90% tree height percentage volume within 0 10% tree height\" (Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the relative volume ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") rvr <- relative_volume_ratio_qsm(cylinder = qsm$cylinder,                                  treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Shedding ratio TreeQSM — shedding_ratio_qsm","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"Calculates shedding ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"","code":"shedding_ratio_qsm(branch, treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"branch Branch field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"shedding ratio.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"shedding ratio defined \"number stem branches without children divided number branches bottom third\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the shedding ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sr <- shedding_ratio_qsm(branch = qsm$branch, treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch angle TreeQSM — stem_branch_angle_qsm","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"Calculates stem branch angle TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"","code":"stem_branch_angle_qsm(branch)"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"branch Branch field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"stem branch angle degrees. NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"stem branch angle defined \"median branching angles 1st order branches degrees. 0 upwards 180 downwards (parallel trunk)\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch angle qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sba <- stem_branch_angle_qsm(branch = qsm$branch) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"Calculates stem branch cluster size TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"","code":"stem_branch_cluster_size_qsm(cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"stem branch cluster size. NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"stem branch cluster size defined \"average number 1st order branches inside 40cm height interval 1st order branches. branch can belong one interval\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch cluster size qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sbcs <- stem_branch_cluster_size_qsm(cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch distance TreeQSM — stem_branch_distance_qsm","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"Calculates stem branch distance TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"","code":"stem_branch_distance_qsm(   cylinder,   treedata,   normalisation = \"no\",   pc = NA,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm. normalisation Can either \"dbh\" nothing. case \"dbh\" average distance divided DBH (Akerblom et al., 2017). pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. relevant normalisation equals \"dbh\". buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available normalisation equals \"dbh\". thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"stem branch distance. Unitless normalisation, meters without normalisation. NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"stem branch distance defined \"Average distance 1st order branches computed using moving average window width 1 m. window empty average distance window set half window width. Can normalised DBH\" (Akerblom et al., 2017 & Terryn et al., 2020). something different \"dbh\" given, normalisation done. Default normalisation. DBH calculated dbh.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch distance # from Akerblom et al. (2017) qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sbd <- stem_branch_distance_qsm(cylinder = qsm$cylinder,                                 treedata = qsm$treedata,                                 normalisation = \"dbh\") # with point cloud data for buttressed trees pc <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") sbd <- stem_branch_distance_qsm(cylinder = qsm$cylinder,                                 treedata = qsm$treedata,                                 normalisation = \"dbh\", pc = tree_pc,                                 buttress = TRUE) # from Terryn et al. (2020) sbd <- stem_branch_distance_qsm(cylinder = qsm$cylinder,                                 treedata = qsm$treedata,                                 normalisation = \"no\") }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch length TreeQSM — stem_branch_length_qsm","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"Calculates stem branch length TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"","code":"stem_branch_length_qsm(   branch,   treedata,   normalisation = \"treeheight\",   pc = NA,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"branch Branch field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm. normalisation Can either \"dbh\" \"treeheight\". case \"dbh\" mean lengths stem branches divided DBH (Akerblom et al., 2017). case \"treeheight\" mean divided tree height (Terryn et al., 2020). something different \"dbh\" \"treeheight\" given, normalisation done. Default normalisation. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. relevant normalisation equals \"dbh\" \"treeheight\". buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available normalisation equals \"dbh\". thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"stem branch length. Unitless normalisation, meters without normalisation. NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"stem branch length defined \"average length 1st order branches. Can normalised DBH tree height\" (Akerblom et al., 2017 & Terryn et al., 2020). DBH tree height calculated dbh tree_height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch radius # from Akerblom et al. (2017) qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sbl <- stem_branch_length_qsm(branch = qsm$branch,                               treedata = qsm$treedata,                               normalisation = \"dbh\") # with point cloud data for a buttressed tree pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") sbl <- stem_branch_length_qsm(branch = qsm$branch, treedata = qsm$treedata,                               normalisation = \"dbh\", pc = pc_tree,                               buttress = TRUE) # from Terryn et al. (2020) sbl <- stem_branch_length_qsm(branch = qsm$branch, treedata = qsm$treedata,                               normalisation = \"treeheight\") # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") sbl <- stem_branch_length_qsm(branch = qsm$branch, treedata = qsm$treedata,                               normalisation = \"treeheight\", pc = pc_tree)  }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch radius TreeQSM — stem_branch_radius_qsm","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"Calculates stem branch radius TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"","code":"stem_branch_radius_qsm(   cylinder,   treedata,   normalisation = \"treeheight\",   pc = NA )"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm. normalisation Can either \"treeheight\" \"parentcylinder\". case \"treeheight\" mean radius 10 biggest branches divided tree height (Terryn et al., 2020). case \"parentcylinder\" mean taken ratios radius 10 biggest branches radius parent cylinders (Akerblom et al., 2017). something different \"treeheight\" \"parentcylinder\" given, normalisation done. Default normalisation. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. relevant normalisation equals \"treeheight\".","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"stem branch radius. Unitless normalisation, meters without normalisation.  NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"stem branch radius defined \"Mean 10 largest 1st order branches measured base. Can normalised tree height stem radius respective height\" (Akerblom et al., 2017 & Terryn et al., 2020). Tree height calculated tree_height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch radius # from Akerblom et al. (2017) qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sbr <- stem_branch_radius_qsm(cylinder = qsm$cylinder,                               treedata = qsm$treedata,                               normalisation = \"parentcyl\") # from Terryn et al. (2020) sbr <- stem_branch_radius_qsm(cylinder = qsm$cylinder,                               treedata = qsm$treedata,                               normalisation = \"treeheight\") # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") sbr <- stem_branch_radius_qsm(cylinder = qsm$cylinder,                               treedata = qsm$treedata,                               normalisation = \"treeheight\",                               pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_Terryn_2020.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary structural metrics Terryn et al. (2020) — summary_Terryn_2020","title":"Summary structural metrics Terryn et al. (2020) — summary_Terryn_2020","text":"Returns summary data.frame containing metrics defined Terryn et al. (2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_Terryn_2020.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary structural metrics Terryn et al. (2020) — summary_Terryn_2020","text":"","code":"summary_Terryn_2020(   QSMs_path,   version = \"2.4.0\",   sbr_normalisation = \"treeheight\",   sbl_normalisation = \"treeheight\",   sbd_normalisation = \"no\",   PCs_path = NA,   extension = \".txt\",   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   OUT_path = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_Terryn_2020.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary structural metrics Terryn et al. (2020) — summary_Terryn_2020","text":"QSMs_path character path folder contains treeQSMs. files format xxx_000_qsm.mat (xxx plotname, 000 tree number) xxx_000_qsm_0.mat (0 end example n-th QSM made tree 000). multiple QSMs present one tree mean values different QSMs taken tree final value certain feature. version character indicating version TreeQSM used produce qsms. Default version 2.4.0. possible versions 2.2.0. sbr_normalisation Character (default=\"treeheight\"). Normalisation parameter stem_branch_radius_qsm. sbl_normalisation Character (default=\"treeheight\"). Normalisation parameter stem_branch_length_qsm. sbd_normalisation Character (default=\"\"). Normalisation parameter stem_branch_distance_qsm. PCs_path character path folder contains tree point clouds. Default NA point clouds available. point clouds used determine DBH, tree height, projected crown area crown volume. DBH tree height obtained tree point clouds used normalisation features. point cloud files format xxx_000_pc order link tree point cloud ' respective treeQSM. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". relevant tree point clouds available. buttress Logical (default=FALSE), indicates trees buttresses. relevant tree point clouds available. relevant tree point clouds available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point clouds available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses. relevant tree point clouds available buttress == TRUE. OUT_path character path folder summary csv file saved logical (default=FALSE) case csv file produced.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_Terryn_2020.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary structural metrics Terryn et al. (2020) — summary_Terryn_2020","text":"summary metrics Terryn et al. (2020) data.frame. summary saved csv file output folder provided.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_Terryn_2020.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary structural metrics Terryn et al. (2020) — summary_Terryn_2020","text":"Metrics Terryn et al. (2020): stem branch angle (sba, stem_branch_angle_qsm), stem branch cluster size (sbcs, stem_branch_cluster_size_qsm), stem branch radius (sbr, stem_branch_radius_qsm), stem branch length (sbl, stem_branch_length_qsm), stem branch distance (sbd, stem_branch_distance_qsm), dbh height ratio (dhr, dbh_height_ratio_qsm), dbh volume ratio (dvr, dbh_volume_ratio_qsm), volume 55 (vb55, volume_below_55_qsm), cylinder length volume ratio (clvr, cylinder_length_volume_ratio_qsm), shedding ratio (sr, shedding_ratio_qsm), branch angle ratio (bar, branch_angle_ratio_qsm), relative volume ratio (rvr, relative_volume_ratio_qsm), crown start height (csh, crown_start_height_qsm), crown height (ch, crown_height_qsm), crown evenness (ce, crown_evenness_qsm), crown diameter height ratio (cdhr, crown_diameterheight_ratio_qsm), dbh minimum radius ratio (dmr, dbh_minradius_ratio_qsm).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_Terryn_2020.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary structural metrics Terryn et al. (2020) — summary_Terryn_2020","text":"Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_Terryn_2020.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary structural metrics Terryn et al. (2020) — summary_Terryn_2020","text":"","code":"if (FALSE) { # Calculate the summary with default parameters and export to csv # recommended for non-buttressed trees summary <- summary_Terryn_2020(QSMs_path = \"path/to/folder/QSMs/\",                                OUT_path = \"path/to/out/folder/\") # also using point cloud info summary <- summary_Terryn_2020(QSMs_path = \"path/to/folder/QSMs/\",                                PCs_path = \"path/to/folder/PCs/\",                                extension = \".txt\",                                OUT_path = \"path/to/out/folder/\") # Calculate the summary with non-default parameter values # recommended for buttressed trees summary <- summary_Terryn_2020(QSMs_path = \"path/to/folder/QSMs/\",                                PCs_path = \"path/to/folder/PCs/\",                                extension = \".txt\", buttress = TRUE,                                OUT_path = \"path/to/out/folder/\") }"},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"Returns summary data.frame containing tree position (X,Y-coordinates), tree height, diameter breast height, diameter buttresses, projected crown area crown volume.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"","code":"summary_basic_pointcloud_metrics(   PCs_path,   extension = \".txt\",   thresholdbranch = 1.5,   minheight = 1,   concavity = 2,   alpha = 1,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   OUT_path = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". relevant tree point clouds available. thresholdbranch Numeric value (default=1.5) classify_crown_pc. minheight Numeric value (default=1) classify_crown_pc. default value based non-buttressed trees. Choose higher value (e.g. 4) buttressed trees. concavity Numeric value (default=2). Parameter projected_crown_area_pc function used calculate projected crown area. alpha Numeric value (default=1). Parameter volume_crown_pc function used calculate crown volume. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. OUT_path character path folder summary csv file saved logical (default=FALSE) case csv file produced.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"summary basic structural metrics multiple tree point clouds data.frame. Includes tree height, diameter breast height, diameter buttresses, projected crown area crown volume. summary saved csv file output folder provided.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"tree position, tree height, diameter breast height, diameter buttresses, projected crown area crown volume otained tree_position_pc, tree_height_pc, dbh_pc, dab_pc, projected_crown_area_pc volume_crown_pc respectively.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"","code":"if (FALSE) { # Calculate the summary with default parameters and export to csv # recommended for non-buttressed trees summary <- summary_basic_pointcloud_metrics(PCs_path = \"path/to/folder/PCs/\",                                             OUT_path = \"path/to/out/folder/\") # Calculate the summary with non-default parameter values # recommended for buttressed trees summary <- summary_basic_pointcloud_metrics(PCs_path = \"path/to/folder/PCs/\",                                             extension = \".ply\",                                             minheight = 4, buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total branch length TreeQSM — total_branch_length_qsm","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"Extracts total branch length treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"","code":"total_branch_length_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"total branch length TreeQSM liters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract total branch length qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") branchlen <- total_branch_length_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total branch volume TreeQSM — total_branch_volume_qsm","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"Extracts total branch volume treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"","code":"total_branch_volume_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"total branch volume TreeQSM liters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract total branch volume qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") branchvol <- total_branch_volume_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total cylinder length TreeQSM — total_cyl_length_qsm","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"Extracts total cylinder length treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"","code":"total_cyl_length_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"total length cylinders (branch trunk) TreeQSM meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract total cylinder length qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") tot_len <- total_cyl_length_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree height — tree_height","title":"Tree height — tree_height","text":"Returns tree height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree height — tree_height","text":"","code":"tree_height(treedata, pc = NA)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree height — tree_height","text":"treedata Treedata field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. point cloud available NA used input (default=NA).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree height — tree_height","text":"tree height meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree height — tree_height","text":"tree point cloud available tree_height calculation based point cloud (accurate) tree_height_pc. tree point cloud available tree height based treeQSM tree_height_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree height — tree_height","text":"","code":"if (FALSE) { qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") h <- tree_height(treedata = qsm$treedata) pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") h <- tree_height(treedata = qsm$treedata, pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree height point cloud — tree_height_pc","title":"Tree height point cloud — tree_height_pc","text":"Returns tree height measured tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree height point cloud — tree_height_pc","text":"","code":"tree_height_pc(pc)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree height point cloud — tree_height_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree height point cloud — tree_height_pc","text":"tree height (numeric value).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree height point cloud — tree_height_pc","text":"tree height measured difference Z-value highest lowest point tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree height point cloud — tree_height_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the tree height pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") tree_height <- tree_height_pc(pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree height TreeQSM — tree_height_qsm","title":"Tree height TreeQSM — tree_height_qsm","text":"Extracts tree height treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree height TreeQSM — tree_height_qsm","text":"","code":"tree_height_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree height TreeQSM — tree_height_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree height TreeQSM — tree_height_qsm","text":"tree height TreeQSM meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree height TreeQSM — tree_height_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract tree height qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") height <- tree_height_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree point cloud position — tree_position_pc","title":"Tree point cloud position — tree_position_pc","text":"Returns (X,Y)-position tree point cloud based mean X Y value points within 6mm thick horizontal slice breast height (1.27 m 1.33 m lowest tree point).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree point cloud position — tree_position_pc","text":"","code":"tree_position_pc(pc)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree point cloud position — tree_position_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree point cloud position — tree_position_pc","text":"Numeric XY coordinates (location) tree stem.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree point cloud position — tree_position_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the tree position pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") pos <- tree_position_pc(pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"TreeQSM position — tree_position_qsm","title":"TreeQSM position — tree_position_qsm","text":"Returns (X,Y)-position treeQSM based start position first cylinder higher 1.3 m ground.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TreeQSM position — tree_position_qsm","text":"","code":"tree_position_qsm(cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TreeQSM position — tree_position_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TreeQSM position — tree_position_qsm","text":"Numeric XY coordinates (location) tree stem.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TreeQSM position — tree_position_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate tree position qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") pos <- tree_position_qsm(cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total tree volume TreeQSM — tree_volume_qsm","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"Extracts total tree volume treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"","code":"tree_volume_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"total volume TreeQSM liters. trunk modeled triangulation total volume sum triangulated volume stem (bottom), volume stem cylinder (top) volume branch cylinders.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract tree volume qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") tot_vol <- tree_volume_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total trunk volume TreeQSM — trunk_volume_qsm","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"Extracts total trunk volume treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"","code":"trunk_volume_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"total trunk volume TreeQSM liters. trunk modelled triangulation total volume sum triangulated volume stem (bottom) volume stem cylinder (top).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract trunk volume qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") trunkvol <- trunk_volume_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"Calculates radii three vertical bins fitted TreeQSM cylinders.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"","code":"vertical_bin_radii_qsm(treedata, cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"radii three vertical bins.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"radii radii cylinders whose axis vertical goes bin centre point, contains approximately 90% volume branch cylinders bin. tree divided three vertical bins, centre point bin defined average mean points stem cylinders bin. bin contain stem cylinders centre previous bin used (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the vertical bin radii qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") radii <- vertical_bin_radii_qsm(treedata = qsm$treedata,                                 cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Volume below 55 TreeQSM — volume_below_55_qsm","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"Calculates volume 55% TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"","code":"volume_below_55_qsm(cylinder, treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"volume 55.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"volume 55 defined \"relative branch volume 55% tree height\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the volume below 55 qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") vol_55 <- volume_below_55_qsm(cylinder = qsm$cylinder,                               treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_crown_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown volume point cloud — volume_crown_pc","title":"Crown volume point cloud — volume_crown_pc","text":"Returns crown volume measured tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_crown_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown volume point cloud — volume_crown_pc","text":"","code":"volume_crown_pc(   pc,   alpha = 1,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   plot = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_crown_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown volume point cloud — volume_crown_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. alpha Numeric value (default=1) alpha computation 3D alpha-shape tree crown based ashape3d. thresholdbranch Numeric value (default=1.5) classify_crown_pc. minheight Numeric value (default=1) classify_crown_pc. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). relevant tree point clouds available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant buttress == TRUE. plot Logical (default=FALSE), indicates optimised circle fitting plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_crown_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown volume point cloud — volume_crown_pc","text":"volume tree crown (numeric value) volume 3D alpha-shape computed crown points tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_crown_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown volume point cloud — volume_crown_pc","text":"function uses ashape3d volume_ashape3d calculate volume 3D alpha-shape fitted crown points obtained classify_crown_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_crown_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown volume point cloud — volume_crown_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the crown volume pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") vol_crown <- volume_crown_pc(pc = pc_tree) # and plot the 3D alpha-shape vol_crown <- volume_crown_pc(pc = pc_tree, plot = TRUE) # with non-default settings for a buttressed tree vol_crown <- volume_crown_pc(pc = pc_tree, alpha = 2, minheight = 4,                              buttress = TRUE) }"}]
